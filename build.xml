<!--
 *  Simple Ant (http://jakarta.apache.org/ant) build script for Cyberduck
 *
 *  $Header$
 *  $Revision$
 *  $Date$
 *
 *  Copyright (c) 2003 David Kocher. All rights reserved.
 *  http://icu.unizh.ch/~dkocher/
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  Bug fixes, suggestions and comments should be sent to:
 *  dkocher@cyberduck.ch
 -->

<project name="Cyberduck" default="build" basedir=".">

	<property file="build.properties"/>

	<property name="debug" value="on"/>
	<property name="home" value="."/>
    <property name="unittests" value="${home}/test"/>
	<property name="build" value="${home}/build"/>
    <property name="build.unittests" value="${build}/unittests" />
    <property name="build.unittests.reports" value="${build}/unittests/junit_reports" />
	<property name="config" value="${home}/config"/>
	<property name="img" value="${home}/img"/>
	<property name="lib" value="${home}/lib"/>
	<property name="source" value="${home}/source"/>
	<property name="classes" value="${build}/classes"/>
	<property name="resources" value="${home}/resources"/>
	<property name="doc" value="${home}/doc"/>

    <path id="test.classpath">
        <path refid="build.classpath"/>
        <pathelement location="${classes}"/>
        <pathelement location="${build.unittests}"/>
		<fileset dir="${build}">
			<include name="*.jar"/>
			<include name="*.jnilib"/>
		</fileset>
    </path>

	<path id="build.classpath">
		<pathelement location="/System/Library/Java"/>
		<fileset dir="${lib}">
			<include name="*.jar"/>
		</fileset>
	</path>

	<!-- mac os x properties-->
	<property name="app.name" value="Cyberduck"/>
	<property name="app.bundle" value="${build}/${app.name}.app"/>
	<property name="app.contents" value="${app.bundle}/Contents"/>
	<property name="app.resources" value="${app.contents}/Resources"/>
	<property name="app.classes" value="${home}/${build}/intermediates/${app.name}.build/JavaClasses"/>
	<property name="app.java" value="${app.resources}/Java"/>

	<target name="init" depends="manifest">
		<tstamp/>
		<echo message="ant version:   ${ant.version}"/>
		<echo message="java version:  ${ant.java.version}"/>
		<echo message=""/>
		<echo message="   ---------------------------------------------------------------"/>
		<echo message="   project home:		${home}"/>
		<echo message="   project build:  	${build}"/>
		<echo message="   project source:	${source}"/>
		<echo message="   ---------------------------------------------------------------"/>
		<echo message=""/>
		<echo message="IMPORTANT NOTE: YOU HAVE TO RUN THE BUILD TASK 'app' IN XCODE FIRST!"/>
		<echo message=""/>
		<echo message="Building ${app.name}..."/>
		<mkdir dir="${build}"/>
		<mkdir dir="${build.unittests}"/>
		<mkdir dir="${build.unittests.reports}"/>
		<mkdir dir="${classes}"/>
	</target>


	<target name="build" depends="archive" description="Compile, jar and copy to application bundle"> 
		<copy todir="${app.java}">
			<fileset dir="${build}">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<copy todir="${app.java}">
			<fileset dir="${lib}">
				<include name="*.jar"/>
			</fileset>
		</copy>
		<copy todir="${app.java}">
			<fileset dir="${build}">
				<include name="*.jnilib"/>
			</fileset>
		</copy>
		<antcall target="copy-language-ressources"/>
		<antcall target="repace-tokens"/>
	</target>
	
	<target name="copy-language-ressources">
		<copy todir="${app.java}">
			<fileset dir="English.lproj">
				<include name="*.properties"/>
			</fileset>
		</copy>
		<copy todir="${app.java}">
			<fileset dir="German.lproj">
				<include name="*.properties"/>
			</fileset>
		</copy>
		<copy todir="${app.java}">
			<fileset dir="Dutch.lproj">
				<include name="*.properties"/>
			</fileset>
		</copy>
		<copy todir="${app.java}">
			<fileset dir="French.lproj">
				<include name="*.properties"/>
			</fileset>
		</copy>
		<copy todir="${app.java}">
			<fileset dir="Italian.lproj">
				<include name="*.properties"/>
			</fileset>
		</copy>
		<copy todir="${app.java}">
			<fileset dir="Japanese.lproj">
				<include name="*.properties"/>
			</fileset>
		</copy>
		<copy todir="${app.java}">
			<fileset dir="Portuguese.lproj">
				<include name="*.properties"/>
			</fileset>
		</copy>
	</target>

	<target name="repace-tokens">
		<replace
			dir="${app.contents}"
			token="*version*"
			value="${cyberduck.version.major}.${cyberduck.version.minor}"
			summary="true">
			<include name="*.plist"/>
		</replace>
	</target>


	<target name="headers" description="Generate header files for JNI">
		<javah 
			outputFile="${source}/ch/cyberduck/core/Login.h"
			classpath="${classes}">
			<class name="ch.cyberduck.core.Login"/>
		</javah>
	</target>
  
  
	<target name="compile" depends="init" description="Compile the source tree">
		<javac
			debug="${debug}"
			deprecation="on"
			srcdir="${source}"
			destdir="${classes}">
			<classpath refid="build.classpath"/>
		</javac>
		<antcall target="headers"/>
	</target>
  
  
	<target name="archive" depends="compile, manifest" description="Create .jar files of the compiled classes">
		<jar jarfile="${build}/cocoa.jar"
			update="yes"
			manifest="${build}/MANIFEST.MF">
			<fileset dir="${classes}/">
				<include name="ch/cyberduck/ui/*.class"/>
				<include name="ch/cyberduck/ui/cocoa/**/*.class"/>
			</fileset>
		</jar>
		<jar jarfile="${build}/core.jar"
			update="yes"
			manifest="${build}/MANIFEST.MF">
			<fileset dir="${classes}">
				<include name="**/*.jnilib"/>
				<include name="ch/cyberduck/core/**/*.class"/>
			</fileset>
		</jar>
		<jar jarfile="${build}/j2ssh.jar"
			update="yes">
			<fileset dir="${classes}">
				<include name="com/sshtools/j2ssh/**/*.class"/>
			</fileset>
		</jar>
		<jar jarfile="${build}/ftp.jar"
			update="yes"
			manifest="${build}/MANIFEST.MF">
			<fileset dir="${classes}">
				<include name="com/enterprisedt/**/*.class"/>
			</fileset>
		</jar>
		<jar jarfile="${build}/http.jar"
			update="yes">
			<fileset dir="${classes}">
				<include name="org/apache/commons/httpclient/**/*.class"/>
			</fileset>
		</jar>
	</target>
  

	<target name="doc" depends="init" description="Generate Javadoc">
		<mkdir dir="${doc}"/>
		<javadoc packagenames="ch.cyberduck.*,com.*,org.*"
			sourcepath="${source}"
			destdir="${doc}"
			author="true"
			version="true"
			use="true"
			windowtitle="${app.name} API"
			doctitle="${app.name}"
			bottom="Copyright (c) 2003 David Kocher. Enjoy ${app.name}!">
			<classpath refid="build.classpath"/>
		</javadoc>
	</target>


	<target name="clean" description="Delete compiled classes and jar files">
		<delete dir="${classes}"/>
		<delete dir="${build}/Cyberduck.build"/>
		<delete file="${build}/cocoa.jar"/>
		<delete file="${build}/swing.jar"/>
		<delete file="${build}/core.jar"/>
		<delete file="${build}/ftp.jar"/>
		<delete file="${build}/http.jar"/>
	</target>


	<target name="manifest">
		<manifest file="${build}/MANIFEST.MF">
			<attribute name="Built-By" value="${user.name}"/>
			<attribute name="Specification-Title" value="Cyberduck"/>
			<attribute name="Specification-Version" value="${cyberduck.version.major}.${cyberduck.version.minor}"/>
			<attribute name="Specification-Vendor" value="David Kocher"/>
			<attribute name="Implementation-Version" value="${cyberduck.version.major}.${cyberduck.version.minor}"/>
		</manifest>
	</target>
	
	
	<target name="junit" depends="compile" description="Runs all test cases">
        <javac
            debug="${debug}"
            deprecation="on"
            srcdir="${unittests}"
            destdir="${build.unittests}"
            includes="**/*.java">
            <classpath refid="test.classpath"/>
        </javac>
        <junit fork="yes" printsummary="on" filtertrace="on" haltonfailure="no" showoutput="yes">
            <classpath refid="test.classpath"/>
            <formatter type="plain" usefile="false"/>
            <formatter type="xml" extension=".xml" usefile="true" />
            <batchtest todir="${build.unittests.reports}">
                <fileset dir="${build.unittests}">
                    <include name="**/*Test*.class"/>
                    <exclude name="**/AllTests.class"/>
                </fileset>
            </batchtest>
        </junit>
	</target>
</project>