/* DO NOT EDIT THIS FILE - it is machine generated */
/* Generated for class glguerin.io.imp.mac.macosx.TinWatcher */
/* Generated from TinWatcher.java*/

#ifndef _Included_glguerin_io_imp_mac_macosx_TinWatcher
#define _Included_glguerin_io_imp_mac_macosx_TinWatcher
#include <jni.h>
#ifdef __cplusplus
extern "C" {
#endif

/**
	 TinWatcher is the FileForker.Watcher for CarbonMacOSXForker.
	 It uses the FNSubscription API available in 10.1 and higher.
	<p>
	 The FNSubscription callbacks require an active Carbon event-loop
	 in order for any originating FNNotify change-signals to call the callback.
	 In retrospect, this is understandable, given that FNSubscription and FNNotify are
	 parts of the Carbon API.  It certainly wasn't documented, though.
	 @author Gregory Guerin
*/

/*
 * Class:     glguerin_io_imp_mac_macosx_TinWatcher
 * Method:    nativeInit
 * Signature: ()I
 */

/**
	 This idempotent method performs all the native-side once-only initialization.
	 It's synchronized on the class-lock so it can't be called re-entrantly from other threads.
	 That shouldn't happen, but one never knows.
*/

JNIEXPORT jint JNICALL Java_glguerin_io_imp_mac_macosx_TinWatcher_nativeInit
	(JNIEnv *, jclass);

/*
 * Class:     glguerin_io_imp_mac_macosx_TinWatcher
 * Method:    makeToken
 * Signature: (Ljava/lang/String;Z)I
 */

/**
	 Create a magic token for this TinWatcher, using FNSubscribe() and a native FSRef.
	 Or using FNSubscribeByPath().
	  int makeToken( String targetPath, boolean ignoreBroadcasts );
*/

JNIEXPORT jint JNICALL Java_glguerin_io_imp_mac_macosx_TinWatcher_makeToken
	(JNIEnv *, jobject, jstring, jboolean);

/*
 * Class:     glguerin_io_imp_mac_macosx_TinWatcher
 * Method:    killToken
 * Signature: (I)V
 */

/**
	 Destroy the magic token held by this TinWatcher.
*/

JNIEXPORT void JNICALL Java_glguerin_io_imp_mac_macosx_TinWatcher_killToken
	(JNIEnv *, jobject, jint);

#ifdef __cplusplus
}
#endif
#endif
